A linked-list is a DS where every node has a pointer field which stores
the position of the next node. The first node is called the
headNode, and the last node points to NULL

To insert a new node at beginning, 
    struct node *new1; 

    Connect the new node to the next (head) node in the ll
    new1->next = headNode;

    Assign the head node to the first node
    headNode = new1; 

To insert a new node at end,
    This method is similar to traversing. Since we want temp to reach 
    the last node in the ll, we use a whil loop to traverse and 
    get there.

    Once there, we assign the last node's *next to the node to 
    insert.

    temp = headNode;
    TEMP->NEXT = NULL; 
    // This line stops the program from crashing as it declares 
    // the new node to be the last
    while(temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = new1;

To delete a node at beginning of the list,
    Once we move the headNode, the node gets deleted automatically.
    We just need to move the headNode . The single line we need is

    headNode = headNode->next

    The previous node becomes unaccessible and hence gets deleted.

To delete a node at the end of the list
    We need to TRAVERSE to the second last node and assign its next to NULL.
    The difficulty lies in getting to the second last node.

    struct node *temp = head;
    struct node *temp1 = head;    

    This piece of code is essential when deleting a node
    if (head == NULL) {
        printf"("No item to delete!);
    }
    else {
        while(temp1->next != NULL) {
            temp = temp1;
            temp1 = temp1->next;
        }

        At the end, temp1 will be at the end of the list and 
        temp will be at the second last node.

        If there is only one node in the ll,
        if (temp1 == head) {
            head = NULL;
        }
        else {
            temp->next = NULL;
        }
    }

Traversing the linked-list - i.e. visiting every node in the ll only once,
i.e. printing the data one by one.
    if (head == NULL) {
        printf"("No item to display!);
    }
    temp = head;
    while(temp!=NULL) {
        printf("%d", temp->data);
        temp = temp->next'
    }