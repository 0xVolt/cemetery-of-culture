STACKS
    1. What order do stacks follow?
        Stacks follow LIFO - the bottom-most element spends most time in Stack. Only one point of insertion 
        and deletion.
    2. Overflow?
        In array implementation, when we push more elements to the stack and the stack is full, then overflow 
        condition occurs. In LL implementation, overflow condition need not be checked --> max size does not 
        need to be specified --> dynamic memory allocation
    3. Underflow?
        When we try to delete from an empty stack, we get stack underflow condition. This is common for both
        implementations
    4. Applications of Stacks:
        i. Infix/Postfix conversions
        ii. Undo-Redo features in software - editors, photoshop, etc.
        iii. Forward and Backward feature in web browsers
    5. Basic operations of Stack:
        i. Push()
        ii. Pop()
        iii Peek() --> returns the top element of the stack without deleting it
    6. Time complexities:
        The time complexities for push(), pop(), peek(), checkEmpty() are O(1) --> we dont run any loop in 
        these functions
    7. Stack Array vs. Stack LL:
        i. MAX Size need not be declared in LL since we use DMA
        ii. In LL implementation, overflow condition need not be checked --> max size does not 
            need to be specified --> dynamic memory allocation

QUEUES
    1. Points of Interest:
        FIFO - insertion and deletion happen at separate ends unlike stacks
        Insertion --> rear/tail of the queue ---> Enqueue operation
        Deletion --> front/head of the queue ---> Dequeue operation

        Queue will lie between indices front and rear. The rest of the Array will be free space.
    2. Basic Operations of Queue:
        i. Enqueue
        ii. Dequeue
        iii. front --> returns element at front posn without deleting it
        iv. isEmpty --> checks if the queue is empty

        All operations are O(1) --> no loops
        i.e. they shouldn't depend on any variables