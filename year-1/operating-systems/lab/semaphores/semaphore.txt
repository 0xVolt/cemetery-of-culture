Critical section
    It is a portion of the code that contains shared variables that can be accessed

    Atomic action -> whether it executes completely or not at all. We need an atomic action in Critical section, i.e. only one process can execute in the critical section at a time while all others wait to execute in their critical section.

    We have an entry and exit section
        If a process can obtain all resources at the entry then it can go to execute and then release resources at exit section

        entry -> get resources
        exit -> release resources

    do {
        entry section
            critical section
        exit section
            remainder section
    } while(true);


Race Condition
    When multiple threads are trying to execute in the critical section -> but it has to execute in a certain order

    This can be avoided when we treat the critical section as an atomic action


Solution to critical section problem
    1. Mutex: 
        if a processes execute one at a time

    2. Progress:
        if there are no executing processes and if there are some processes that are waiting then the selection of processes to the CS should not be postponed, 
        
        i.e. as soon as possible selection (or)
        any process that is free must enter the critical section

    3. Bound waiting
        one process cannot wait indefinitely when another process gets into CS multiple times, so,
        bound must be made as to number of times that a process can enter their critical sections after a req has been made to enter and before the req is granted,

        i.e. number of times a process can enter its critical section must be limited (or)



SEMAPHORE
    It is a tool for synchronisation, not just for CS problems

    It is an int variable used to solve critical section problems using 2 atomic oprs -> wait() & signal()
    (originally called P() and V())

    wait(S) if S is +ve, decrements its arg, i.e. S-- 
    wait(S) if S is -ve or 0, then no opr is performed -> ie it is in busy wait
    wait(S) {
        while (S <= 0) {
            ; // busy wait
        }
        S--;
    }

    signal(S) -> S++ ==> value of arg is incremented 
    signal(S) {
        S++;
    }

    Types of SEMAPHOREs
        1. Counting SEMAPHORE
            int values in the SEMAPHORE can range over unrestricted domain

            if any new resources are added to a process, the count will automatically be incremented

            if any resources are being removed, the count will be decremented

        2. Binary SEMAPHORE
            int values can range only be 0 or 1

            if 1 -> wait()
            if 0 -> signal()


SEMAPHORE implementation without Busy waiting
    Taking ex of Washing Machine:

        initally mutex value is 0
        m = 0;

        P2 -> drying process
        P1 -> washing process

        if P1 executes first, then P2 executes last but for eg:

        first P2 then P1

        m = 0;

        P2 -> wait(mutex)
              statement; 
              m = 0;
              wait(0); ==> S = 0;

        P1 -> statement;
              signal() ---> S++ = 1

        P2 -> wait(S)
              executes

    Producer consumer problem (Buffer problem)
        When the number required by the customer is more that what the producer requires => problem

        production < consumption
                or
        production >>> consumption where there is no space to store extra produce (Buffer)

        This is a synchronisation problem

        put down the condition that if consumer doesnt find anything in buffer, then they have to wait otherwise if the buffer is full, then the producer has to wait and stop production

        this is solved by SEMAPHORE where fast production and slow consumption can be handled and slow production and fast consumption can be handled